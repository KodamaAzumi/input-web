service: kodama23-diary
frameworkVersion: '3'
provider:
  name: aws
  profile: nzu
  region: ap-northeast-1
  runtime: nodejs18.x
  environment:
    # ${sls:stage} は ${opt:stage, self:provider.stage, "dev"} のショートカット
    DYNAMODB_TABLE: ${self:service}-${sls:stage}-table
    S3_BUCKET: ${self:service}-${sls:stage}-bucket
    TZ: Asia/Tokyo
  # これいらないかもしれない
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            # - 's3:*'
            - 's3:GetObject'
            # - 's3:GetEncryptionConfiguration'
            # - 's3:PutEncryptionConfiguration'
            - 's3:PutObject'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - 'Ref': 'S3Bucket'
                - '/*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          # ${aws:region} は ${opt:region, self:provider.region, "us-east-1"} のショートカット
          Resource: 'arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
functions:
  create:
    handler: diaries/create.create
    events:
      - http:
          path: diaries
          method: post
          cors: true
    timeout: 30
  # delete:
  #   handler: diaries/delete.delete
  #   events:
  #     - http:
  #         path: diaries/{id}/{timestamp}
  #         method: delete
  #         cors: true
  get:
    handler: diaries/get.get
    events:
      - http:
          path: diaries/{id}/{timestamp}
          method: get
          cors: true
  list:
    handler: diaries/list.list
    events:
      - http:
          path: diaries/{id}
          method: get
          cors: true
  update:
    handler: diaries/update.update
    events:
      - http:
          path: diaries/{id}/{timestamp}
          method: put
          cors: true
    timeout: 30
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        # AccessControl: PublicRead
        BucketName: ${self:provider.environment.S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    # S3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   # DependsOn:
    #   #   - S3Bucket
    #   Properties:
    #     Bucket: !Ref S3Bucket
    #     PolicyDocument:
    #       # Version: '2012-10-17'
    #       Statement:
    #         # - Sid: PublicReadGetObject
    #         - Action:
    #             - s3:GetObject
    #           Effect: Allow
    #           Principal: '*'
    #           Resource: !Sub arn:aws:s3:::${S3Bucket}/*
    #             # Fn::Join:
    #             #   - "/"
    #             #   - - Fn::GetAtt:
    #             #         - S3Bucket
    #             #         - Arn
    #             #     - "*"
    #             # Fn::Sub: ${S3Bucket.Arn}/*
    #             # Fn::Join:
    #             #   - ''
    #             #   - - 'arn:aws:s3:::'
    #             #     - 'Ref': 'S3Bucket'
    #             #     - '/*'
    DiaryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # スタックが削除された際にリソースを保持する
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          # パーティションキー
          - AttributeName: id
            AttributeType: S
          # ソートキー
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        # BillingMode が PROVISIONED（初期値）の時は必須
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
custom:
  # local S3 の設定
  s3:
    host: 127.0.0.1
    port: 4569
    directory: .buckets
  # local dynamodb の設定
  serverless-dynamodb:
    stages:
      - dev
    start:
      host: 127.0.0.1
      port: 8000
      migrate: true
      dbPath: .dynamodb
# plugins:
#   - serverless-dynamodb
#   - serverless-s3-local
#   - serverless-offline
